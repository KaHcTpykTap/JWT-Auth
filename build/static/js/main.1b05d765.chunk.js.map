{"version":3,"sources":["components/LoginForm.tsx","http/index.ts","services/UserService.ts","App.tsx","services/AuthService.ts","store/store.ts","index.tsx"],"names":["observer","_useState","useState","_useState2","Object","slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","store","useContext","Context","react_default","a","createElement","onChange","e","target","value","type","placeholder","onClick","login","registration","API_URL","$api","axios","create","withCredentials","baseURL","interceptors","request","use","config","headers","Authorization","concat","localStorage","getItem","response","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","error","originalRequest","wrap","_context","prev","next","console","log","status","_isRetry","get","sent","setItem","data","accessToken","abrupt","t0","stop","_x","apply","this","arguments","UserService","users","setUsers","_getUsers","App_regeneratorRuntime","fetchUsers","useEffect","checkAuth","isLoading","isAuth","user","isActivated","logout","disabled","getUsers","map","key","components_LoginForm","AuthService","post","Store","classCallCheck","makeAutoObservable","bool","setAuth","setUser","message","_context2","removeItem","_context3","setLoading","_context4","__webpack_require__","d","__webpack_exports__","createContext","ReactDOM","createRoot","document","getElementById","render","Provider","src_App"],"mappings":"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","file":"static/js/main.1b05d765.chunk.js","sourcesContent":["import { observer } from \"mobx-react-lite\";\r\nimport React, { FC, useContext, useState } from \"react\";\r\nimport { Context } from \"../index\";\r\n\r\nconst LoginForm: FC = () => {\r\n  const [email, setEmail] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const { store } = useContext(Context);\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        onChange={(e) => setEmail(e.target.value)}\r\n        value={email}\r\n        type=\"text\"\r\n        placeholder=\"Email\"\r\n      />\r\n      <input\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        value={password}\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n      />\r\n      <button onClick={() => store.login(email, password)}>Login</button>\r\n      <button onClick={() => store.registration(email, password)}>\r\n        Registration\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(LoginForm);\r\n","import axios from \"axios\";\r\nimport { AuthResponse } from \"../models/response/AuthResponse\";\r\n\r\nexport const API_URL = \"https://sensationnel-chaise-20290.herokuapp.com/api\";\r\n\r\nconst $api = axios.create({\r\n  /* cookies auto set to axios */\r\n  withCredentials: true,\r\n  baseURL: API_URL,\r\n});\r\n\r\n$api.interceptors.request.use((config: any) => {\r\n  config.headers.Authorization = `Bearer ${localStorage.getItem(\"token\")}`;\r\n  return config;\r\n});\r\n\r\n$api.interceptors.response.use(\r\n  (config) => {\r\n    return config;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    console.log(error.config);\r\n    \r\n    if (error.response.status == 401 && error.config && !error.config._isRetry) {\r\n      originalRequest._isRetry = true;\r\n      try {\r\n        const response = await axios.get<AuthResponse>(`${API_URL}/refresh`, {\r\n          withCredentials: true,\r\n        });\r\n        localStorage.setItem(\"token\", response.data.accessToken);\r\n        return $api.request(originalRequest)\r\n        \r\n      } catch (error) {\r\n        console.log(\"User not authorized\");\r\n        \r\n      }\r\n    }\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport default $api;\r\n","import { AxiosResponse } from \"axios\";\r\nimport $api from \"../http\";\r\nimport { IUser } from \"../models/IUser\";\r\n\r\nexport default class UserService {\r\n    static fetchUsers(): Promise<AxiosResponse<IUser[]>> {\r\n        return $api.get<IUser[]>(\"/users\")\r\n    }\r\n}\r\n","import React, { FC, useContext, useEffect, useState } from \"react\";\nimport { Context } from \"./index\";\nimport LoginForm from \"./components/LoginForm\";\nimport { observer } from \"mobx-react-lite\";\nimport { IUser } from \"./models/IUser\";\nimport UserService from \"./services/UserService\";\n\nconst App: FC = () => {\n  const { store } = useContext(Context);\n  const [users, setUsers] = useState<IUser[]>([]);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"token\")) {\n      store.checkAuth();\n    }\n  }, []);\n\n  async function getUsers() {\n    try {\n      const response = await UserService.fetchUsers();\n      setUsers(response.data);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  if (store.isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!store.isAuth) {\n    return (\n      <div>\n        <LoginForm />\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <h1>\n        {store.isAuth ? `User is authorized ${store.user.email}` : \"Log in\"}\n      </h1>\n      <h1>\n        {store.user.isActivated\n          ? `account verified by email ${store.user.email}`\n          : \"Verify your account\"}\n      </h1>\n      <button\n        onClick={() => {\n          store.logout();\n          setUsers([]);\n        }}\n      >\n        Logout\n      </button>\n      <div>\n        <button disabled={!store.user.isActivated} onClick={() => getUsers()}>Get users</button>\n      </div>\n      {users.map((user) => (\n        <div key={user.email}>{user.email}</div>\n      ))}\n    </div>\n  );\n};\n\nexport default observer(App);\n","import $api from \"../http\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport { AuthResponse } from \"../models/response/AuthResponse\";\r\n\r\nexport default class AuthService {\r\n  static async login(\r\n    email: string,\r\n    password: string\r\n  ): Promise<AxiosResponse<AuthResponse>> {\r\n    return $api.post<AuthResponse>(\"/login\", { email, password });\r\n  }\r\n\r\n  static async registration(\r\n    email: string,\r\n    password: string\r\n  ): Promise<AxiosResponse<AuthResponse>> {\r\n    return $api.post<AuthResponse>(\"/registration\", { email, password });\r\n  }\r\n\r\n  static async logout(): Promise<void> {\r\n    return $api.post(\"/logout\");\r\n  }\r\n}\r\n","import { IUser } from \"../models/IUser\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport AuthService from \"../services/AuthService\";\r\nimport axios from \"axios\";\r\nimport { AuthResponse } from \"../models/response/AuthResponse\";\r\nimport { API_URL } from \"../http\";\r\n\r\nexport default class Store {\r\n  user = {} as IUser;\r\n  isAuth = false;\r\n  isLoading = false;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  setAuth(bool: boolean) {\r\n    this.isAuth = bool;\r\n  }\r\n\r\n  setUser(user: IUser) {\r\n    this.user = user;\r\n  }\r\n\r\n  setLoading(bool: boolean) {\r\n    this.isLoading = bool;\r\n  }\r\n\r\n  async login(email: string, password: string) {\r\n    try {\r\n      const response = await AuthService.login(email, password);\r\n      console.log(response);\r\n      localStorage.setItem(\"token\", response.data.accessToken);\r\n      this.setAuth(true);\r\n      this.setUser(response.data.user);\r\n    } catch (err: any) {\r\n      console.log(\"Error response\");\r\n      console.log(err.response.data.message);\r\n    }\r\n  }\r\n\r\n  async registration(email: string, password: string) {\r\n    try {\r\n      const response = await AuthService.registration(email, password);\r\n      console.log(response);\r\n      localStorage.setItem(\"token\", response.data.accessToken);\r\n      this.setAuth(true);\r\n      this.setUser(response.data.user);\r\n    } catch (err: any) {\r\n      console.log(\"Error response\");\r\n      console.log(err.response.data.message);\r\n    }\r\n  }\r\n\r\n  async logout() {\r\n    try {\r\n      const response = await AuthService.logout();\r\n      console.log(response);\r\n      localStorage.removeItem(\"token\");\r\n      this.setAuth(false);\r\n      this.setUser({} as IUser);\r\n    } catch (err: any) {\r\n      console.log(\"Error response\");\r\n      console.log(err.response.data.message);\r\n    }\r\n  }\r\n\r\n  async checkAuth() {\r\n    this.setLoading(true)\r\n    try {\r\n      const response = await axios.get<AuthResponse>(`${API_URL}/refresh`, {\r\n        withCredentials: true,\r\n      });\r\n      localStorage.setItem(\"token\", response.data.accessToken);\r\n      this.setAuth(true);\r\n      this.setUser(response.data.user);\r\n    } catch (err: any) {\r\n      console.log(\"Error response\");\r\n      console.log(err.response.data.message);\r\n    } finally {\r\n      this.setLoading(false)\r\n    }\r\n  }\r\n}\r\n","import React, { createContext } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport Store from \"./store/store\";\n\ninterface IStore {\n  store: Store;\n}\n\nconst store = new Store();\n\nexport const Context = createContext<IStore>({\n  store,\n});\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <Context.Provider value={{ store }}>\n    <App />\n  </Context.Provider>\n);\n"],"sourceRoot":""}